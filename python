Python程序大小写敏感
空值用None表示
等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量
[变量类型不固定的语言]称为动态语言
静态语言在定义变量时必须指定变量类型，赋值的类型不匹配会报错

在Python中通常用全部大写的变量名表示常量
----------------------------------------
在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应。如果只有一个%?，括号可以省略。

常见的占位符有：

%d  整数
%f  浮点数
%s  字符串
%x  十六进制整数

用%%转义表示一个%：

>>> 'growth rate: %d %%' % 7
'growth rate: 7 %'
----------------------------------------
按照从优先级最高到最低的顺序，布尔运算符有：Not、And、Or、Xor、Eqv 和 Imp。
----------------------------------------
list是一种有序的集合，可以随时添加和删除其中的元素
L = ['a', 'b', 'c']
len(L)  --> 3
L[0] --> 'a'
L[-1] --> 'c'
L.append('d')  --> ['a', 'b', 'c', 'd']
L.insert(0,'e')  --> ['e', 'a', 'b', 'c']
L.pop() --> ['a', 'b']
L.pop(0)  --> ['b', 'c']
L[0] = 't' --> ['t', 'b', 'c']

tuple是另一种有序列表，一旦初始化就不能修改
T = ('a', 'b', 'c')
len(T)  --> 3
T[0] --> 'a'
T[-1] --> 'c'
只有1个元素的tuple定义时必须加一个逗号来消除歧义，因为括号既可以表示tuple，又可以表示数学公式中的小括号
=============
>>> t = (1,)
>>> t
(1,)
=============
----------------------------------------
if <condition 1>:
    statement 1
elif <condition 2>:
    statemnet 2
elif <condition 3>:    
    statement 3
else:
    statement 4
********************************
for x in ...:
    statement
----------------------------------------
sum = 0
x = 1
while x < 100:
    x = x + 2
    sum = 1 + x
print sum

********************************
sum = 0
n =99
while n > 0:
    sum = sum + n
    n = n - 2
print sum
********************************
raw_input  #character
int(raw_input)  #number
********************************
********************************
----------------------------------------
dict  #key-value  key不能重复,不可变(list不能作为key)
{'key1': x, 'key2': y, 'key3': z}
dict.get('key')  #get value
dict.pop('key')  #delete value
dict.values()    #get all values
dict.intervalues()
dict.items()
dict.iteritems()
len(dict)
===============
if 'key' in dict:
    print dict['key']  #get value
===============
#dict有以下特点：
查找和插入的速度极快，不会随着key的增加而增加；
需要占用大量的内存，内存浪费多。
#list相反：
查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。

set和dict类似，也是一组key的集合，但不存储value，key不能重复。
S = set(['key1', 'key2', 'key3'])
S.add('key4')
S.remove('key1')  #delete key
----------------------------------------
递归函数:在内部调用自身的函数
def fact(n):
    if n==1:
        return 1
    return n * fact(n - 1)
解决递归调用栈溢出的方法是通过尾递归优化:函数返回的时候调用自身，且return语句不包含表达式
def fact(n):
    return fact_iter(n, 1)

def fact_iter(num, product):
    if num == 1:
        return product
    return fact_iter(num - 1, num * product)
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
定义一个函数使用def语句，依次写出函数名、括号、括号中的参数和冒号
然后在缩进块中编写函数体，函数的返回值用return语句返回
    pass可以用来作为占位符，让代码能运行起来
Python的函数返回多值其实是返回一个tuple
----------------------------------------
必选参数在前，默认参数在后
默认参数必须指向不变对象
----------------------------------------
----------------------------------------
Slice
[0:3]表示，从索引0开始取3个元素，即索引0，1，2，不包括索引3
如果第一个索引是0，还可以省略：[:3]
只用一个 : ，表示从头到尾
支持倒数切片
字符串'xxx'或Unicode字符串u'xxx'也可以看成是一种list，每个元素就是一个字符
----------------------------------------
Iteration
enumerate() 
zip()
----------------------------------------
List Comprehensions
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
从Python 2.7到Python 3.x就有不兼容的一些改动，比如2.x里的字符串用'xxx'表示str，Unicode字符串用u'xxx'表示unicode，而在3.x中，所有字符串都被视为unicode，因此，写u'xxx'和'xxx'是完全一致的，而在2.x中以'xxx'表示的str就必须写成b'xxx'，以此表示“二进制字符串”。

__future__模块，把下一个新版本的特性导入到当前版本

# still running on Python 2.7

from __future__ import unicode_literals

print '\'xxx\' is unicode?', isinstance('xxx', unicode)
print 'u\'xxx\' is unicode?', isinstance(u'xxx', unicode)
print '\'xxx\' is str?', isinstance('xxx', str)
print 'b\'xxx\' is str?', isinstance(b'xxx', str)

from __future__ import division

print '10 / 3 =', 10 / 3
print '10.0 / 3 =', 10.0 / 3
print '10 // 3 =', 10 // 3

结果如下：
10 / 3 = 3.33333333333
10.0 / 3 = 3.33333333333
10 // 3 = 3

----------------------------------------
Object Oriented Programming

OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。


面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。

而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。

在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。

数据封装、继承和多态是面向对象的三大特点
-----------------------------------------
和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数和关键字参数。
-----------------------------------------
类是抽象的模板
实例是根据类创建出来的一个个具体的“对象”
每个对象都拥有相同的方法，但各自的数据可能不同

定义类是通过class关键字
class Student(object):
    pass

class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类

创建实例是通过类名+()实现的

-----------------------------------------
在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问

以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量
-----------------------------------------
定义一个class实际上就定义了一种数据类型
多态真正的威力：调用方只管调用，不管细节
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
